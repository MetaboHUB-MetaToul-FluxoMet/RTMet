#!Jinja2

{% set conda_envs = {'TRFP_ENV': 'wf-trfp',
                       'BINNER_ENV': 'wf-binner',
                       'BIH_ENV': 'wf-bih',
                       'DATAMUNGING_ENV': 'wf-datamunging'} %}
[scheduling]
    cycling mode = integer
    initial cycle point = 1
    [[xtriggers]]
        catch_raw = catch_raw('%(point)s', '%(workflow_run_dir)s', "integer_naming")
    [[graph]]
        R1 = """
            verify_config & ping_influxdb => _catch_raw
        """
        P1 = """
            @catch_raw => _catch_raw & setup_cyclepoint_sharedir => 
                raw_to_mzml => mzml_to_peaks => peaks_to_matches => quantify
            
            raw_to_mzml => get_run_timestamp => format_peaks & 
                format_concentrations & format_metadata

            quantify => format_peaks => upload_peaks
            quantify => format_concentrations => upload_concentrations
            quantify => format_metadata => upload_metadata
        """
        +P2/P1 = """
            quantify & quantify[-P1] & quantify[-P2] => model_fluxes
            get_run_timestamp => format_fluxes
            model_fluxes => format_fluxes => upload_fluxes
            model_fluxes => format_metadata
        """
    [[queues]]
        [[[default]]]
            limit = 10
        [[[large_jobs]]]
            limit = 5
            members = mzml_to_peaks, peaks_to_matches
[runtime]
    [[root]]
        [[[environment]]]
            BINNER_THRES = 0.50 # ratio of max(TIC), to filter injection scans
            DATABASE_FILE = molecules_db.csv # should be in the db folder
            MZ_TOL = 10 # m/z tolerance (ppm) for matching
            SPECTROMETER_ID = orbitrap_01
{% for env, conda_env_name in conda_envs.items() %}    
    [[{{env}}]]
        env-script = """
            set +eu
            conda activate {{ conda_env_name }}
            set -eu
        """
{% endfor %}
    [[_catch_raw]]
        script = """
            cylc broadcast "${CYLC_WORKFLOW_ID}" \
                -p "${CYLC_TASK_CYCLE_POINT}" \
                -s "[environment]RAWFILE_PATH=${catch_raw_file}"

            cylc broadcast "${CYLC_WORKFLOW_ID}" \
                -p "${CYLC_TASK_CYCLE_POINT}" \
                -s "[environment]RAWFILE_STEM=$(basename "$catch_raw_file" .raw)"
        """
    [[setup_cyclepoint_sharedir]]
        script = """
            mkdir ${CYLC_WORKFLOW_SHARE_DIR}/${CYLC_TASK_CYCLE_POINT}
        """
    [[raw_to_mzml]]
        inherit = None, TRFP_ENV
        script = """
            thermorawfileparser \
                --format=mzml \
                --input=${RAWFILE_PATH} \
                --output=${CYLC_WORKFLOW_SHARE_DIR}/${CYLC_TASK_CYCLE_POINT} \
                --metadata=txt
        """
    [[get_run_timestamp]] # regex should be replaced with XML parsing
        script = """
            MZML_FILE=${CYLC_WORKFLOW_SHARE_DIR}/${CYLC_TASK_CYCLE_POINT}/${RAWFILE_STEM}.mzML
            RUN_TIMESTAMP=$(grep '<run' ${MZML_FILE} | sed 's/.*startTimeStamp="\([^"]*\)".*/\1/')
            
            cylc broadcast "${CYLC_WORKFLOW_ID}" \
                -p "${CYLC_TASK_CYCLE_POINT}" \
                -s "[environment]RUN_TIMESTAMP=${RUN_TIMESTAMP}"
        """
    [[mzml_to_peaks]]
        inherit = None, BINNER_ENV
        script = """
            binner-cli \
                --file ${CYLC_WORKFLOW_SHARE_DIR}/${CYLC_TASK_CYCLE_POINT}/${RAWFILE_STEM}.mzML \
                --outdir ${CYLC_TASK_WORK_DIR} \
                --threshold ${BINNER_THRES}

            mv ${CYLC_TASK_WORK_DIR}/${RAWFILE_STEM}.features.csv \
                ${CYLC_WORKFLOW_SHARE_DIR}/${CYLC_TASK_CYCLE_POINT}

            mv ${CYLC_TASK_WORK_DIR}/${RAWFILE_STEM}.infusion_scans.png \
                ${CYLC_WORKFLOW_SHARE_DIR}/${CYLC_TASK_CYCLE_POINT}
        """
        # BINNER_OUTFILE=${CYLC_TASK_WORK_DIR}/${RAWFILE_STEM}.tsv
        # SHARED_FEATURES_FILE=${CYLC_WORKFLOW_SHARE_DIR}/${CYLC_TASK_CYCLE_POINT}/${RAWFILE_STEM}.features.csv
        # sed "1s|^|datetime;instrument_id;|" ${BINNER_OUTFILE} | \
        #     sed "2,$ s|^|$RUN_TIMESTAMP;$SPECTROMETER_ID;|" > ${SHARED_FEATURES_FILE}
    [[peaks_to_matches]]
        inherit = None, DATAMUNGING_ENV
        script = python -c 'import os, mzmatch; mzmatch.match(os.getenv("db_path"), os.getenv("query_path"), os.getenv("mz_tol"))'
        [[[environment]]]
            db_path = ${CYLC_WORKFLOW_RUN_DIR}/db/${DATABASE_FILE}
            query_path = ${CYLC_WORKFLOW_SHARE_DIR}/${CYLC_TASK_CYCLE_POINT}/${RAWFILE_STEM}.features.csv
            mz_tol = ${MZ_TOL}
    [[quantify]]
        inherit = None, DATAMUNGING_ENV
        script = echo "quantify TODO"
    [[format_peaks]]
    [[format_concentrations]]
    [[format_fluxes]]
    [[format_metadata]]
    [[upload_peaks]]
    [[upload_concentrations]]
    [[upload_fluxes]]
    [[upload_metadata]]
    [[model_fluxes]]
    [[verify_config]]
    [[ping_influxdb]]