#!Jinja2

# This workflow uses Jinja2 templating.
# It also uses Rose (and cylc-rose) for user configuration.

# Rose will loads rose-suite.conf, which is a symlink to the actual user config.

# Create task families for conda environments.
%include 'envs/conda.cylc'

[task parameters]
    #main_results = peaks, concentrations, fluxes, metadata
    results = features, concentrations
[scheduling]
    cycling mode = integer
    initial cycle point = 0
    [[xtriggers]]
        catch_raw = catch_raw('%(point)s', '%(workflow_run_dir)s', "integer_naming")
    [[graph]]
        R1/^ = verify_config => verify_molecules_database & verify_met_model => is_setup
        +P1/P1 = """
            @catch_raw => _catch_raw => raw_to_mzml => get_run_timestamp =>
                mzml_to_peaks => peaks_to_matches => quantify
            is_setup[^] => _catch_raw
        """
        +P3/P1 = quantify & quantify[-P1] & quantify[-P2] => model_fluxes

{% if cfg__toggle_influxdb %}
        R1/^ = verify_config => setup_influxdb_config => ping_influxdb_server => create_run_bucket => is_setup
        +P1/P1 = """
            mzml_to_peaks => upload_features
            quantify => upload_concentrations
        """
        # +P3/P1 = """
        #    model_fluxes => upload_fluxes
        #    model_fluxes => upload_metadata
        # """
{% endif %}

    [[queues]]
        [[[default]]]
            limit = 10
        [[[large_jobs]]]
            limit = 5
            members = mzml_to_peaks, peaks_to_matches
[runtime]
    [[root]]
        # See https://cylc.github.io/cylc-doc/latest/html/workflow-design-guide/general-principles.html#shared-task-io-paths
        # ROSE_DATA=$CYLC_WORKFLOW_SHARE_DIR/data
        # ROSE_DATAC=$CYLC_WORKFLOW_SHARE_DIR/cycle/n
        env-script = $(eval rose task-env)
        [[[environment]]]
            # Directory (starting from workflow root) where user input should be stored
            USER_DATA = config
            # Runtime dir names in ROSE_DATAC
            MAIN_RESULTS = dataflow
            QUALITY_CHECKS = qc
    [[verify_config]]
        script = rose macro --validate --verbose
    [[verify_molecules_database]]
        script = echo "Verifying molecules database! (TODO)"
    [[verify_met_model]]
        script = echo "Verifying metabolic model! (TODO)"
    [[is_setup]]
        script = echo "The workflow has been set up, ready to run!"
    [[_catch_raw]]
        script = """
            cylc broadcast "${CYLC_WORKFLOW_ID}" \
                -p "${CYLC_TASK_CYCLE_POINT}" \
                -s "[environment]RAWFILE_PATH=${catch_raw_file}"

            cylc broadcast "${CYLC_WORKFLOW_ID}" \
                -p "${CYLC_TASK_CYCLE_POINT}" \
                -s "[environment]RAWFILE_STEM=$(basename "$catch_raw_file" .raw)"
        """
    [[raw_to_mzml]]
        # Transforms a raw file to mzML
        inherit = None, TRFP_ENV
        script = """
            mkdir -p ${output}
            thermorawfileparser \
                --format=${format} \
                --input=${input} \
                --output=${output} \
                --metadata=${metadata}
        """
        [[[environment]]]
            format = mzml
            metadata = json
            input = ${RAWFILE_PATH}
            output = ${ROSE_DATAC}/${MAIN_RESULTS}
    [[get_run_timestamp]]
        # Extracts the spectrometer start timestamp from the mzML file
        # Regex should be replaced with XML parsing.
        script = """
            RUN_TIMESTAMP=$(grep '<run' ${mzml} | sed 's/.*startTimeStamp="\([^"]*\)".*/\1/')
            
            cylc broadcast "${CYLC_WORKFLOW_ID}" \
                -p "${CYLC_TASK_CYCLE_POINT}" \
                -s "[environment]RUN_TIMESTAMP=${RUN_TIMESTAMP}"
        """
        [[[environment]]]
            mzml = ${ROSE_DATAC}/${MAIN_RESULTS}/${RAWFILE_STEM}.mzML
    [[FORMAT_TABLE]]
        # Add metadata columns (datetime, cycle, instrument_id)
        # Necessary for InfluxDB
        post-script = """
            mkdir -p ${results_dir}
            cat ${table} | \
                sed "1s|^|datetime;cycle;instrument_id;|" | \
                sed "2,$ s|^|$timestamp;$cycle;$spectrometer_id;|" > \
                ${results_dir}/${table}
        """
        [[[environment]]]
            table = _ # Defined in child tasks
            results_dir = ${ROSE_DATAC}/${MAIN_RESULTS}
            timestamp = ${RUN_TIMESTAMP}
            cycle = ${CYLC_TASK_CYCLE_POINT}
            spectrometer_id = {{ cfg__spectrometer_id }}
    [[mzml_to_peaks]]
        # Generates a feature table from the mzML file
        inherit = None, BINNER_ENV, FORMAT_TABLE
        script = """
            mkdir -p ${qc_dir}
            binner-cli \
                --file ${mzml} \
                --threshold ${threshold}
            mv *.png ${qc_dir}
        """ # FORMAT_TABLE post-script
        [[[environment]]]
            threshold = {{ cfg__tic_threshold }}
            mzml = ${ROSE_DATAC}/${MAIN_RESULTS}/${RAWFILE_STEM}.mzML
            qc_dir = ${ROSE_DATAC}/${QUALITY_CHECKS}
            table = ${RAWFILE_STEM}.features.csv
    [[peaks_to_matches]]
        # Annotates features with a molecular database
        inherit = None, DATAMUNGING_ENV, FORMAT_TABLE
        script = """
            mzmatch \
                --db ${db_path} \
                --query ${query_path} \
                --ppm ${ppm_tol}
            mv ${annotated_features} ${results_dir}
        """ # FORMAT_TABLE post-script
        [[[environment]]]
            db_path = ${CYLC_WORKFLOW_RUN_DIR}/${USER_DATA}/{{ cfg__mol_database }}
            query_path = ${ROSE_DATAC}/${MAIN_RESULTS}/${RAWFILE_STEM}.features.csv
            ppm_tol = {{ cfg__ppm_tol }}
            results_dir = ${ROSE_DATAC}/${MAIN_RESULTS}
            annotated_features = ${RAWFILE_STEM}.features.annotated.csv
            table = ${RAWFILE_STEM}.matches.csv
    [[quantify]]
        inherit = None, DATAMUNGING_ENV
        script = cp ${results_dir}/${matches} ${results_dir}/${concentrations}
        [[[environment]]]
            matches = ${RAWFILE_STEM}.matches.csv
            concentrations = ${RAWFILE_STEM}.concentrations.csv
            results_dir = ${ROSE_DATAC}/${MAIN_RESULTS}
    [[model_fluxes]]
        script = echo "model_fluxes TODO"


    [[INFLUXDB]]
        [[[environment]]]
            configs_path = ${ROSE_DATA}/influxdb-config.ini
            config_name = influx2
            bucket_name = ${CYLC_WORKFLOW_ID}
    [[setup_influxdb_config]]
        inherit = INFLUXDB
        script = """
            influx config create \
                --config-name ${config_name} \
                --configs-path ${configs_path} \
                --host-url ${host_url} \
                --token ${token} \
                --org ${org}
        """
        [[[environment]]]
            host_url = {{ cfg__influxdb_url }}
            token = {{ cfg__influxdb_auth_token }}
            org = {{ cfg__influxdb_org }}
    [[ping_influxdb_server]]
        inherit = INFLUXDB
        script = influx ping --configs-path ${configs_path} --active-config ${config_name}
    [[create_run_bucket]]
        inherit = INFLUXDB
        script = """
            echo "Creating InfluxDB bucket for workflow run!"
            influx bucket create \
                --name ${bucket_name} \
                --configs-path ${configs_path} \
                --active-config ${config_name}
        """
    [[upload<results>]]
        inherit = INFLUXDB, INFLUX_ENV
        script = """
            influxdb-upload \
                --ini ${configs_path} \
                --bucket ${bucket_name} \
                --table ${table} \
                --dir ${dir} \
                --schemas ${schemas} \
        """
        [[[environment]]]
            table = ${CYLC_TASK_PARAM_results}
            dir = ${ROSE_DATAC}/${MAIN_RESULTS}
            schemas = ${CYLC_WORKFLOW_RUN_DIR}/meta/data_formats/tables_schemas.json
