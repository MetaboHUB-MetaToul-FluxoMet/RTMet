#!Jinja2

{% set conda_envs = {'TRFP_ENV': 'wf-trfp',
                       'BINNER_ENV': 'wf-binner',
                       'BIH_ENV': 'wf-bih',
                       'DATAMUNGING_ENV': 'wf-datamunging'} %}

[scheduling]
    cycling mode = integer
    initial cycle point = 1
    [[xtriggers]]
        catch_raw = catch_raw('%(point)s', '%(workflow_run_dir)s', "integer_naming")
    [[graph]]
        R1 = """
            setup_timeseries => append_mzmatch
        """
        P1 = """
            @catch_raw => _catch_raw & raw_to_mzml => get_run_timestamp => 
            mzml_to_peaks => peaks_to_matches => append_mzmatch
            append_mzmatch[-P1] => append_mzmatch
        """
    [[queues]]
        [[[default]]]
            limit = 10
        [[[large_jobs]]]
            limit = 5
            members = mzml_to_peaks, peaks_to_matches
[runtime]
    [[root]]
        [[[environment]]]
            BINNER_THRES = 0.50 # ratio of max(TIC), to filter injection scans
            DATABASE_FILE = online_12C_NEG_SK_nodup.tsv # should be in the db folder
            MZ_DB = 3 # column number for masses in the database file
            NAMES_DB = 1 # column number for compounds names in the database
            DELTA_TYPE = ppm # either ppm or dalton
            DELTA = 10 # mass tolerance for annotation
            SPECTROMETER_ID = orbitrap_01
{% for env, conda_env_name in conda_envs.items() %}    
    [[{{env}}]]
        env-script = """
            set +eu
            conda activate {{ conda_env_name }}
            set -eu
        """
{% endfor %}
    [[setup_timeseries]]
        script = """
            cp ${CYLC_WORKFLOW_RUN_DIR}/db/${DATABASE_FILE} \
                ${CYLC_WORKFLOW_SHARE_DIR}/intensity_timeseries_mzmatch.tsv
        """
    [[_catch_raw]]
        script = """
            RAWFILE_STEM=$(basename "$catch_raw_file" .raw)
            cylc broadcast "${CYLC_WORKFLOW_ID}" \
                -p "${CYLC_TASK_CYCLE_POINT}" \
                -s "[environment]RAWFILE_STEM=${RAWFILE_STEM}"
        """
    [[raw_to_mzml]]
        inherit = None, TRFP_ENV
        script = """
            mkdir -p ${CYLC_WORKFLOW_SHARE_DIR}/${CYLC_TASK_CYCLE_POINT}
            thermorawfileparser \
                --format=mzml \
                --input=$catch_raw_file \
                --output=${CYLC_WORKFLOW_SHARE_DIR}/${CYLC_TASK_CYCLE_POINT} \
                --metadata=json
        """
    [[get_run_timestamp]] # regex should be replaced with XML parsing
        script = """
            MZML_FILE=${CYLC_WORKFLOW_SHARE_DIR}/${CYLC_TASK_CYCLE_POINT}/${RAWFILE_STEM}.mzML
            RUN_TIMESTAMP=$(grep '<run' ${MZML_FILE} | sed 's/.*startTimeStamp="\([^"]*\)".*/\1/')
            cylc broadcast "${CYLC_WORKFLOW_ID}" \
                -p "${CYLC_TASK_CYCLE_POINT}" \
                -s "[environment]RUN_TIMESTAMP=${RUN_TIMESTAMP}"
        """
    [[mzml_to_peaks]]
        inherit = None, BINNER_ENV
        script = """
            binner-cli \
                --file ${CYLC_WORKFLOW_SHARE_DIR}/${CYLC_TASK_CYCLE_POINT}/${RAWFILE_STEM}.mzML \
                --outdir ${CYLC_TASK_WORK_DIR} \
                --binnerlyse TRUE \
                --threshold ${BINNER_THRES}

            BINNER_OUTFILE=${CYLC_TASK_WORK_DIR}/${RAWFILE_STEM}.tsv
            SHARED_FEATURES_FILE=${CYLC_WORKFLOW_SHARE_DIR}/${CYLC_TASK_CYCLE_POINT}/${RAWFILE_STEM}.features.csv
            sed "1s|^|datetime;instrument_id;|" ${BINNER_OUTFILE} | \
                sed "2,$ s|^|$RUN_TIMESTAMP;$SPECTROMETER_ID;|" > ${SHARED_FEATURES_FILE}

            mv ${CYLC_TASK_WORK_DIR}/${RAWFILE_STEM}_infusion_scans.png \
                ${CYLC_WORKFLOW_SHARE_DIR}/${CYLC_TASK_CYCLE_POINT}
        """
    [[annotation]]
        inherit = None, BIH_ENV
        script = """
            ${CYLC_WORKFLOW_RUN_DIR}/lib/bank_inhouse/bank_inhouse.pl \
                -input ${CYLC_WORKFLOW_SHARE_DIR}/${CYLC_TASK_CYCLE_POINT}/${RAWFILE_STEM}.tsv \
                -nbHeader 1 \
                -colmass 1 \
                -bank_in ${CYLC_WORKFLOW_RUN_DIR}/db/${DATABASE_FILE} \
                -bank_name user_defined_bank -mzdb ${MZ_DB} \
                -mz_delta ${DELTA_TYPE} \
                -mass_delta ${DELTA} \
                -outputXls ${CYLC_WORKFLOW_SHARE_DIR}/${CYLC_TASK_CYCLE_POINT}/mz_annotated.tsv \
                -outputTab ${CYLC_WORKFLOW_SHARE_DIR}/${CYLC_TASK_CYCLE_POINT}/features_annotated.tsv
        """
    # [[filter]]
    #     script = """
    #         sed '/No_match_in_bank/d' \
    #             ${CYLC_WORKFLOW_SHARE_DIR}/${CYLC_TASK_CYCLE_POINT}/mz_annotated.tsv \
    #             > ${CYLC_WORKFLOW_SHARE_DIR}/${CYLC_TASK_CYCLE_POINT}/mz_annotated_matches.tsv
    #         sed '/No_match_in_bank/d' \
    #             ${CYLC_WORKFLOW_SHARE_DIR}/${CYLC_TASK_CYCLE_POINT}/features_annotated.tsv \
    #             > ${CYLC_WORKFLOW_SHARE_DIR}/${CYLC_TASK_CYCLE_POINT}/features_annotated_matches.tsv
    #     """
    [[peaks_to_matches]]
        inherit = None, DATAMUNGING_ENV
        script = python -c 'import mzmatch; mzmatch.match()'
    [[append_timeseries]]
        inherit = None, DATAMUNGING_ENV
        script = python -c 'import append_timeseries; append_timeseries.append()'
    [[append_mzmatch]]
        inherit = None, DATAMUNGING_ENV
        script = python -c 'import append_timeseries; append_timeseries.append_mzmatch()'