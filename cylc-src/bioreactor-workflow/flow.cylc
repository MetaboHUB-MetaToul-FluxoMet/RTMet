#!Jinja2

%include 'envs/envs.cylc'

[task parameters]
    main_results = peaks, concentrations, fluxes, metadata
[scheduling]
    cycling mode = integer
    initial cycle point = 0
    [[xtriggers]]
        catch_raw = catch_raw('%(point)s', '%(workflow_run_dir)s', "integer_naming")
    [[graph]]
        R1 = """
            verify_config =>
                verify_molecules_database
                & verify_met_model

        """
        +P1/P1 = """
            @catch_raw => _catch_raw => raw_to_mzml => mzml_to_peaks &
                get_run_timestamp => peaks_to_matches => quantify
        """
        +P3/P1 = """
            quantify & quantify[-P1] & quantify[-P2] => model_fluxes
        """

{% if cfg__toggle_influxdb %}
        R1 = verify_config => ping_influxdb => create_run_bucket
        +P1/P1 = """
            quantify => format_peaks => upload_peaks
            quantify => format_concentrations => upload_concentrations
        """
        +P3/P1 = """
            model_fluxes => format_fluxes => upload_fluxes
            model_fluxes => format_metadata => upload_metadata
        """
{% endif %}
        
    [[queues]]
        [[[default]]]
            limit = 10
        [[[large_jobs]]]
            limit = 5
            members = mzml_to_peaks, peaks_to_matches
[runtime]
    [[root]]
        # See https://cylc.github.io/cylc-doc/latest/html/workflow-design-guide/general-principles.html#shared-task-io-paths
        # ROSE_DATA=$CYLC_WORKFLOW_SHARE_DIR/data
        # ROSE_DATAC=$CYLC_WORKFLOW_SHARE_DIR/cycle/n
        env-script = $(eval rose task-env)
        [[[environment]]]
            # Dir names in ROSE_DATAC
            MAIN_RESULTS = dataflow
            QUALITY_CHECKS = qc
    [[verify_config]]
        script = rose macro --validate --verbose
    [[verify_molecules_database]]
        script = echo "Verifying molecules database! (TODO)"
    [[verify_met_model]]
        script = echo "Verifying metabolic model! (TODO)"
    [[_catch_raw]]
        script = """
            cylc broadcast "${CYLC_WORKFLOW_ID}" \
                -p "${CYLC_TASK_CYCLE_POINT}" \
                -s "[environment]RAWFILE_PATH=${catch_raw_file}"

            cylc broadcast "${CYLC_WORKFLOW_ID}" \
                -p "${CYLC_TASK_CYCLE_POINT}" \
                -s "[environment]RAWFILE_STEM=$(basename "$catch_raw_file" .raw)"
        """
    [[raw_to_mzml]]
        inherit = None, TRFP_ENV
        script = """
            mkdir -p ${output}
            thermorawfileparser \
                --format=${format} \
                --input=${input} \
                --output=${output} \
                --metadata=${metadata}
        """
        [[[environment]]]
            format = mzml
            metadata = json
            input = ${RAWFILE_PATH}
            output = ${ROSE_DATAC}/${MAIN_RESULTS}
    [[get_run_timestamp]] # regex should be replaced with XML parsing
        script = """
            MZML_FILE=${mzml_file}
            RUN_TIMESTAMP=$(grep '<run' ${MZML_FILE} | sed 's/.*startTimeStamp="\([^"]*\)".*/\1/')
            
            cylc broadcast "${CYLC_WORKFLOW_ID}" \
                -p "${CYLC_TASK_CYCLE_POINT}" \
                -s "[environment]RUN_TIMESTAMP=${RUN_TIMESTAMP}"
        """
        [[[environment]]]
            mzml_file = ${ROSE_DATAC}/${MAIN_RESULTS}/${RAWFILE_STEM}.mzML
    [[mzml_to_peaks]]
        inherit = None, BINNER_ENV
        script = """
            mkdir -p ${outdir}
            mkdir -p ${plotdir}
            binner-cli \
                --file ${file} \
                --outdir ${outdir} \
                --threshold ${threshold}
            mv ${outdir}/*.png ${plotdir}
        """
        [[[environment]]]
            threshold = {{ cfg__tic_threshold }}
            file = ${ROSE_DATAC}/${MAIN_RESULTS}/${RAWFILE_STEM}.mzML
            outdir = ${ROSE_DATAC}/${MAIN_RESULTS}
            plotdir = ${ROSE_DATAC}/${QUALITY_CHECKS}
    [[peaks_to_matches]]
        inherit = None, DATAMUNGING_ENV
        script = python -c 'import os, mzmatch; mzmatch.match(os.getenv("db_path"), os.getenv("query_path"), os.getenv("ppm_tol"))'
        [[[environment]]]
            db_path = ${CYLC_WORKFLOW_RUN_DIR}/config/{{ cfg__mol_database }}
            query_path = ${ROSE_DATAC}/${MAIN_RESULTS}/${RAWFILE_STEM}.features.csv
            ppm_tol = {{ cfg__ppm_tol }}


    [[quantify]]
        inherit = None, DATAMUNGING_ENV
        script = echo "quantify TODO"
    [[model_fluxes]]
        script = echo "model_fluxes TODO"

    [[ping_influxdb]]
        script = influx ping
    [[create_run_bucket]]
        script = """
            echo "Creating InfluxDB bucket for workflow run!"
            influx bucket create --name ${name}
        """
        [[[environment]]]
            name = ${CYLC_WORKFLOW_ID}
    [[INFLUXDB_FORMATTING]]
        script = echo "Formatting ${input}! (TODO)"
    [[INFLUXDB_UPLOADING]]
        script = echo "Uploading ${input}! (TODO)" 
    [[format<main_results>]]
        inherit = INFLUXDB_FORMATTING
        [[[environment]]]
            input = ${CYLC_TASK_PARAM_main_results}
    [[upload<main_results>]]
        inherit = INFLUXDB_UPLOADING
        [[[environment]]]
            input = ${CYLC_TASK_PARAM_main_results}
