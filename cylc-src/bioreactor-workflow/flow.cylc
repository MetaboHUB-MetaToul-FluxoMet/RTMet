#!Jinja2

[meta]
    title = RTMet: Real-Time Metabolomics using Mass Spectrometry
    description = """
        This workflow uses Jinja2 templating. It also uses Rose (and cylc-rose) for user configuration.
        Rose will loads rose-suite.conf, which is a symlink to the actual user config.
    """
    URL = https://github.com/MetaboHUB-MetaToul-FluxoMet/RTMet

# Create task families for conda environments.
%include 'envs/conda.cylc'

[task parameters]
    #main_results = peaks, concentrations, fluxes, metadata
    results = features, concentrations

[scheduling]
    cycling mode = integer
    initial cycle point = 0
    [[xtriggers]]
        catch_raw = catch_raw('%(point)s', '%(workflow_run_dir)s', {{ cfg__runs_dir }}, {{ cfg__toggle_remote }}, {{ cfg__remote_host }})
    [[graph]]
        R1/^ = verify_config => verify_molecules_database & verify_met_model => is_setup
        +P1/P1 = """
            @catch_raw => _catch_raw => raw_to_mzml => get_run_timestamp =>
                mzml_to_peaks => peaks_to_matches => quantify
            is_setup[^] => _catch_raw
        """
        +P3/P1 = quantify & quantify[-P1] & quantify[-P2] => model_fluxes
{% if cfg__toggle_influxdb %}
        R1/^ = verify_config => setup_influxdb_config => ping_influxdb_server => create_run_bucket => is_setup
        +P1/P1 = """
            mzml_to_peaks => upload_features
            quantify => upload_concentrations
        """
        # +P3/P1 = """
        #    model_fluxes => upload_fluxes
        #    model_fluxes => upload_metadata
        # """
{% endif %}
    [[queues]]
        [[[default]]]
            limit = 10
        [[[large_jobs]]]
            limit = 5
            members = mzml_to_peaks, peaks_to_matches

[runtime]
    [[root]]
        # See https://cylc.github.io/cylc-doc/latest/html/workflow-design-guide/general-principles.html#shared-task-io-paths
        # ROSE_DATA=$CYLC_WORKFLOW_SHARE_DIR/data
        # ROSE_DATAC=$CYLC_WORKFLOW_SHARE_DIR/cycle/n
        env-script = """
            $(eval rose task-env)
            mkdir -p ${ROSE_DATAC}/dataflow
            mkdir -p ${ROSE_DATAC}/qc
        """
        [[[environment]]]
            # Directory (starting from workflow root) where user input should be stored
            USER_CONFIG_DIR = ${CYLC_WORKFLOW_RUN_DIR}/config
            # Runtime dir names in ROSE_DATAC
            MAIN_RESULTS_DIR = ${ROSE_DATAC}/dataflow
            QC_RESULTS_DIR = ${ROSE_DATAC}/qc

    [[verify_config]]
        script = rose macro --validate --verbose
        [[[meta]]]
            title = "Validates the user configuration."

    [[verify_molecules_database]]
        script = echo "Verifying molecules database! (TODO)"
        [[[meta]]]
            title = "Validates the user-defined molecular database."

    [[verify_met_model]]
        script = echo "Verifying metabolic model! (TODO)"
        [[[meta]]]
            title = "Validates the user-defined metabolic model."

    [[is_setup]]
        script = echo "The workflow has been set up, ready to run!"

    [[_catch_raw]]
        script = """
            cylc broadcast "${CYLC_WORKFLOW_ID}" \
                -p "${CYLC_TASK_CYCLE_POINT}" \
                -s "[environment]RAWFILE_PATH=${catch_raw_file}"

            cylc broadcast "${CYLC_WORKFLOW_ID}" \
                -p "${CYLC_TASK_CYCLE_POINT}" \
                -s "[environment]RAWFILE_STEM=$(basename "$catch_raw_file" .raw)"
        """
        [[[meta]]]
            title = "Propagates raw file path and stem to downstream tasks."

    [[raw_to_mzml]]
        inherit = None, CONDA_TRFP
        script = """
            mkdir -p ${output}
            thermorawfileparser \
                --format=${format} \
                --input=${input} \
                --output=${output} \
                --metadata=${metadata}
        """
        [[[environment]]]
            format = mzml
            metadata = json
            input = ${RAWFILE_PATH}
            output = ${MAIN_RESULTS_DIR}
        [[[meta]]]
            title = "Converts a raw files to mzML and extracts run metadata."

    [[get_run_timestamp]]
        # Regex should be replaced with XML parsing.
        script = """
            RUN_TIMESTAMP=$(grep '<run' ${mzml} | sed 's/.*startTimeStamp="\([^"]*\)".*/\1/')

            cylc broadcast "${CYLC_WORKFLOW_ID}" \
                -p "${CYLC_TASK_CYCLE_POINT}" \
                -s "[environment]RUN_TIMESTAMP=${RUN_TIMESTAMP}"
        """
        [[[environment]]]
            mzml = ${MAIN_RESULTS_DIR}/${RAWFILE_STEM}.mzML
        [[[meta]]]
            title = "Extracts the spectrometer run timestamp from the mzML file."

    [[FORMAT_TABLE]]
        post-script = """
            cat ${table} | \
                sed "1s|^|datetime;cycle;instrument_id;|" | \
                sed "2,$ s|^|$timestamp;$cycle;$spectrometer_id;|" > \
                ${results_dir}/${table}
        """
        [[[environment]]]
            table = _ # Defined in child tasks
            results_dir = ${MAIN_RESULTS_DIR}
            timestamp = ${RUN_TIMESTAMP}
            cycle = ${CYLC_TASK_CYCLE_POINT}
            spectrometer_id = {{ cfg__spectrometer_id }}
        [[[meta]]]
            title = "Add metadata columns (datetime, cycle, instrument_id) prior to their upload to InfluxDB"

    [[mzml_to_peaks]]
        inherit = None, CONDA_BINNER, FORMAT_TABLE
        script = """
            binner-cli \
                --file ${mzml} \
                --threshold ${threshold}
            mv *.png ${qc_dir}
        """ # FORMAT_TABLE post-script
        [[[environment]]]
            threshold = {{ cfg__tic_threshold }}
            mzml = ${MAIN_RESULTS_DIR}/${RAWFILE_STEM}.mzML
            qc_dir = ${QC_RESULTS_DIR}
            table = ${RAWFILE_STEM}.features.csv
        [[[meta]]]
            title = "Generates a feature table from the mzML file using spectral binning."

    [[peaks_to_matches]]
        inherit = None, CONDA_DATAMUNGING, FORMAT_TABLE
        script = """
            mzmatch \
                --db ${db_path} \
                --query ${query_path} \
                --ppm ${ppm_tol}
            mv ${annotated_features} ${results_dir}
        """ # FORMAT_TABLE post-script
        [[[environment]]]
            db_path = ${USER_CONFIG_DIR}/{{ cfg__mol_database }}
            query_path = ${MAIN_RESULTS_DIR}/${RAWFILE_STEM}.features.csv
            ppm_tol = {{ cfg__ppm_tol }}
            results_dir = ${MAIN_RESULTS_DIR}
            annotated_features = ${RAWFILE_STEM}.features.annotated.csv
            table = ${RAWFILE_STEM}.matches.csv
        [[[meta]]]
            title = "Annotates features using a user-defined molecular database."

    [[quantify]]
        inherit = None, CONDA_DATAMUNGING
        script = cp ${input} ${output}
        [[[environment]]]
            input = ${MAIN_RESULTS_DIR}/${RAWFILE_STEM}.matches.csv
            output = ${MAIN_RESULTS_DIR}/${RAWFILE_STEM}.concentrations.csv
        [[[meta]]]
            title = "Relative and absolute quantification of metabolites."

    [[model_fluxes]]
        script = echo "model_fluxes TODO"
        [[[meta]]]
            title = "[TODO] Models fluxes using the user-defined metabolic model."

###############################################################################
# InfluxDB tasks

    [[INFLUXDB]]
        [[[environment]]]
            configs_path = ${ROSE_DATA}/influxdb-config.ini
            config_name = influx2
            bucket_name = ${CYLC_WORKFLOW_ID}
        [[[meta]]]
            title = "Family task to inherit InfluxDB configuration."

    [[setup_influxdb_config]]
        inherit = INFLUXDB
        script = """
            influx config create \
                --config-name ${config_name} \
                --configs-path ${configs_path} \
                --host-url ${host_url} \
                --token ${token} \
                --org ${org}
        """
        [[[environment]]]
            host_url = {{ cfg__influxdb_url }}
            token = {{ cfg__influxdb_auth_token }}
            org = {{ cfg__influxdb_org }}
        [[[meta]]]
            title = "Creates an InfluxDB configuration file based on user-defined variables."

    [[ping_influxdb_server]]
        inherit = INFLUXDB
        script = influx ping --configs-path ${configs_path} --active-config ${config_name}
        [[[meta]]]
            title = "Checks the connection to the InfluxDB server defined by the user."

    [[create_run_bucket]]
        inherit = INFLUXDB
        script = """
            echo "Creating InfluxDB bucket for workflow run!"
            influx bucket create \
                --name ${bucket_name} \
                --configs-path ${configs_path} \
                --active-config ${config_name}
        """
        [[[meta]]]
            title = "Creates a bucket in InfluxDB for the current workflow run."

    [[upload<results>]]
        inherit = INFLUXDB, CONDA_INFLUX
        script = """
            influxdb-upload \
                --ini ${configs_path} \
                --bucket ${bucket_name} \
                --table ${table} \
                --dir ${dir} \
                --schemas ${schemas} \
        """
        [[[environment]]]
            table = ${CYLC_TASK_PARAM_results}
            dir = ${MAIN_RESULTS_DIR}
            schemas = ${CYLC_WORKFLOW_RUN_DIR}/meta/data_formats/tables_schemas.json
        [[[meta]]]
            title = "Uploads results table to InfluxDB."
