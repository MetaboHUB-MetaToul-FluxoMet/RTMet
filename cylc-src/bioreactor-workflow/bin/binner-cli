#!/usr/bin/env Rscript

# suppressPackageStartupMessages(library("optparse"))
# suppressPackageStartupMessages(library("readr"))
# suppressPackageStartupMessages(library("magrittr"))
# suppressPackageStartupMessages(library("dplyr"))
# suppressPackageStartupMessages(library("ggplot2"))

################################################################################
# Dependencies check
################################################################################

required_packages <- c(
  "dplyr", "magrittr", "mzR", "tidyr", "methods", "purrr", "stringr", "tibble",
  "crayon", "cli", "lubridate", "ggplot2", "ggthemes", "yaml", "future",
  "furrr", "remotes"
)

missing_packages <- setdiff(
  required_packages,
  installed.packages()[, "Package"]
)

if (length(missing_packages) > 0) {
  cat("\nThe following dependencies are required but not installed:\n")
  cat(paste("- ", missing_packages, "\n", sep = ""))
  cat("\nYou can install them by running:\n")
  cat(
    "  install.packages(c(",
    paste0('"', missing_packages, '"', collapse = ", "), "))"
  )
  cat("\nin your R console.\n\n")
  quit(status = 1)
}

is_binner_installed <- "binneR" %in% installed.packages()[, "Package"]

if (!is_binner_installed) {
  cat("\nBinneR not installed, you can install it by running:\n")
  cat("  remotes::install_github('aberHRML/binneR@v2.6.4', upgrade = 'never')\n")
  cat("in your R console.\n\n")
  quit(status = 1)
}


################################################################################
# Argument parsing
################################################################################

option_list <- list(
  optparse::make_option(c("-f", "--file"),
    type = "character", default = NULL,
    help = "Single .mzML file path",
    metavar = "character"
  ),
  optparse::make_option(c("-d", "--dir"),
    type = "character", default = NULL,
    help = "Directory path containing .mzML files",
    metavar = "character"
  ),
  optparse::make_option(c("-o", "--outdir"),
    type = "character", default = NULL,
    help = "Output directory path [default = input location]",
    metavar = "character"
  ),
  optparse::make_option(c("-t", "--threshold"),
    type = "numeric", default = 0.5,
    help = "Ratio of max(TIC) for injection scans detection. \
    \t\tValue between 0 and 1 [default=%default]",
    metavar = "numeric"
  ),
  optparse::make_option(c("-p", "--precision"),
    type = "integer", default = 2,
    help = "Number of decimal places for spectral binning [default=%default]",
    metavar = "integer"
  ),
  optparse::make_option(c("-b", "--binnerlyse"),
    type = "logical", default = TRUE,
    help = "Number of decimal places for spectral binning [default=%default]",
    metavar = "logical"
  )
)
opt_parser <- optparse::OptionParser(option_list = option_list)
opt <- optparse::parse_args(opt_parser)

# input arguments handling
if (is.null(opt$file) && is.null(opt$dir)) {
  optparse::print_help(opt_parser)
  stop("At least one input argument must be supplied (input file or directory).",
    call. = FALSE
  )
} else if (!is.null(opt$file) && !is.null(opt$dir)) {
  optparse::print_help(opt_parser)
  stop("Only one input argument must be supplied (input file OR directory).",
    call. = FALSE
  )
} else {
  input_type <- ifelse(is.null(opt$file), "dir", "file")
}

# Check that input .mzML file/directory exists and put filepaths in a list
if (input_type == "file") {
  if (!file.exists(opt$file)) {
    stop("Input file not found: ", opt$file, call. = FALSE)
  } else if (!grepl("\\.mzML$", opt$file, ignore.case = TRUE)) {
    stop("Input isn't a .mzML file: ", opt$file, call. = FALSE)
  }
  mzml_files <- c(opt$file)
} else {
  if (!dir.exists(opt$dir)) {
    stop("Input directory not found: ", opt$dir, call. = FALSE)
  }
  mzml_files <- list.files(opt$dir,
    pattern = "\\.mzML$",
    full.names = TRUE,
    ignore.case = TRUE
  )
  if (length(mzml_files) == 0) {
    stop("No .mzML files found in directory: ", opt$dir, call. = FALSE)
  }
}

# outdir argument handling
if (is.null(opt$outdir)) {
  opt$outdir <- ifelse(input_type == "file", dirname(opt$file), opt$dir)
} else {
  if (!dir.exists(opt$outdir)) {
    stop("Output directory not found: ", opt$outdir, call. = FALSE)
  }
}


################################################################################
# Main script
################################################################################

if (length(mzml_files) > 5) {
  cat(
    length(mzml_files),
    "mzML files found in directory: ",
    opt$dir,
    "\n"
  )
} else {
  cat("mzML file(s) to be processed:\n")
  for (file in mzml_files) {
    cat("• ", file, "\n")
  }
}

# To implement: try-catch for feature detection (blame binneR)
# and data wrangling (blame Elliot Fontaine)
if (!opt$binnerlyse) {
  stop("To refactor. In the meantime, please set --binnerlyse=TRUE.")
  # for (file in mzml_files) {
  #   out_file <- paste0(
  #     opt$outdir, "/", sub("\\..*$", "", basename(file)), ".tsv"
  #   )
  #   # Feature detection
  #   infusion_scans <- binneR::detectInfusionScans(file, thresh = opt$threshold)
  #   res <- binneR::readFiles(file, dp = opt$precision, scans = infusion_scans)

  #   # Data wrangling
  #   res_t <- res[["n"]] %>% t()
  #   res_t <- data.frame(MZ = row.names(res_t), res_t)
  #   res_t$MZ <- as.numeric(sub("n", "", res_t$MZ))
  #   res_t <- res_t[order(res_t$MZ), ]
  #   colnames(res_t) <- c("MZ", "INTENSITY")
  #   write.table(res_t, out_file,
  #     quote = FALSE, sep = "\t",
  #     col.names = TRUE, row.names = FALSE
  #   )
  # }
} else {
  for (file in mzml_files) {
    out_file <- paste0(
      opt$outdir,
      "/", sub("\\..*$", "", basename(file)), ".features.csv"
    )
    out_chrom <- paste0(
      opt$outdir,
      "/", sub("\\..*$", "", basename(file)), ".infusion_scans.png"
    )
    out_finger <- paste0(
      opt$outdir,
      "/", sub("\\..*$", "", basename(file)), ".spectrum_fingerprint.png"
    )
    out_purity <- paste0(
      opt$outdir,
      "/", sub("\\..*$", "", basename(file)), ".purity_distribution.png"
    )
    cat("Processing file: ", file, "\n")
    cat("Peaks table file: ", out_file, "\n")
    cat("Infusion scans plot: ", out_chrom, "\n")
    cat("Spectrum fingerprint plot: ", out_finger, "\n")
    cat("Purity distribution plot: ", out_purity, "\n")

    # Peaks detection
    infusion_scans <- binneR::detectInfusionScans(file, thresh = opt$threshold)
    parameters <- binneR::binParameters(infusion_scans)
    info <- tibble::as_tibble(
      data.frame(
        fileOrder = 1,
        injOrder = 1,
        fileName = basename(file),
        batch = 1,
        block = 1,
        name = basename(file),
        class = 1
      )
    )

    analysis <- binneR::binneRlyse(file, info, parameters)
    mz_precis <- binneR::accurateData(analysis)

    # Pour chaque ligne i de mz_precis:
    # si mz_precis$bin[i] - mz_precis$bin[i+1] < 0.01 alors:
    # si mz_precis$centrality[i] et de i+1 sont <= 0.1 on ne garde que la ligne ayant la plus grande intensité
    # implémenter:

    # mz_precis <- mz_precis %>%
    #   dplyr::arrange(bin, desc(intensity)) %>%
    #   dplyr::group_by(bin) %>%
    #   dplyr::mutate(
    #     keep = ifelse(
    #       dplyr::lead(bin) - bin < 0.01,
    #       ifelse(
    #         centrality <= 0.1 & dplyr::lead(centrality) <= 0.1,
    #         ifelse(intensity == max(intensity), TRUE, FALSE),
    #         TRUE
    #       ),
    #       TRUE
    #     )
    #   ) %>%
    #   dplyr::filter(keep) %>%
    #   dplyr::ungroup()


    mz_precis %>%
      dplyr::select(polarity, bin, mz, intensity, purity, centrality) %>%
      readr::write_delim(out_file, delim = ";")

    chrom <- binneR::plotChromatogram(analysis)
    ggplot2::ggsave(out_chrom, chrom)

    fingerprint <- binneR::plotFingerprint(analysis)
    ggplot2::ggsave(out_finger, fingerprint)

    purity <- binneR::plotPurity(analysis, histBins = 100)
    ggplot2::ggsave(out_purity, purity)
  }
}
